<?php
/**
 * RemovedCharacter
 *
 * PHP version 5
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Brave Collective Core Services API
 *
 * Client library of Brave Collective Core Services API
 *
 * OpenAPI spec version: 0.7.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Brave\NeucoreApi\Model;

use \ArrayAccess;
use \Brave\NeucoreApi\ObjectSerializer;

/**
 * RemovedCharacter Class Doc Comment
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemovedCharacter implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RemovedCharacter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'new_player_id' => 'int',
        'new_player_name' => 'string',
        'character_id' => 'int',
        'character_name' => 'string',
        'removed_date' => '\DateTime',
        'action' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'new_player_id' => null,
        'new_player_name' => null,
        'character_id' => 'int64',
        'character_name' => null,
        'removed_date' => 'date-time',
        'action' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_player_id' => 'newPlayerId',
        'new_player_name' => 'newPlayerName',
        'character_id' => 'characterId',
        'character_name' => 'characterName',
        'removed_date' => 'removedDate',
        'action' => 'action'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_player_id' => 'setNewPlayerId',
        'new_player_name' => 'setNewPlayerName',
        'character_id' => 'setCharacterId',
        'character_name' => 'setCharacterName',
        'removed_date' => 'setRemovedDate',
        'action' => 'setAction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_player_id' => 'getNewPlayerId',
        'new_player_name' => 'getNewPlayerName',
        'character_id' => 'getCharacterId',
        'character_name' => 'getCharacterName',
        'removed_date' => 'getRemovedDate',
        'action' => 'getAction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['new_player_id'] = isset($data['new_player_id']) ? $data['new_player_id'] : null;
        $this->container['new_player_name'] = isset($data['new_player_name']) ? $data['new_player_name'] : null;
        $this->container['character_id'] = isset($data['character_id']) ? $data['character_id'] : null;
        $this->container['character_name'] = isset($data['character_name']) ? $data['character_name'] : null;
        $this->container['removed_date'] = isset($data['removed_date']) ? $data['removed_date'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['character_id'] === null) {
            $invalidProperties[] = "'character_id' can't be null";
        }
        if ($this->container['character_name'] === null) {
            $invalidProperties[] = "'character_name' can't be null";
        }
        if ($this->container['removed_date'] === null) {
            $invalidProperties[] = "'removed_date' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['character_id'] === null) {
            return false;
        }
        if ($this->container['character_name'] === null) {
            return false;
        }
        if ($this->container['removed_date'] === null) {
            return false;
        }
        if ($this->container['action'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets new_player_id
     *
     * @return int
     */
    public function getNewPlayerId()
    {
        return $this->container['new_player_id'];
    }

    /**
     * Sets new_player_id
     *
     * @param int $new_player_id new_player_id
     *
     * @return $this
     */
    public function setNewPlayerId($new_player_id)
    {
        $this->container['new_player_id'] = $new_player_id;

        return $this;
    }

    /**
     * Gets new_player_name
     *
     * @return string
     */
    public function getNewPlayerName()
    {
        return $this->container['new_player_name'];
    }

    /**
     * Sets new_player_name
     *
     * @param string $new_player_name new_player_name
     *
     * @return $this
     */
    public function setNewPlayerName($new_player_name)
    {
        $this->container['new_player_name'] = $new_player_name;

        return $this;
    }

    /**
     * Gets character_id
     *
     * @return int
     */
    public function getCharacterId()
    {
        return $this->container['character_id'];
    }

    /**
     * Sets character_id
     *
     * @param int $character_id EVE character ID.
     *
     * @return $this
     */
    public function setCharacterId($character_id)
    {
        $this->container['character_id'] = $character_id;

        return $this;
    }

    /**
     * Gets character_name
     *
     * @return string
     */
    public function getCharacterName()
    {
        return $this->container['character_name'];
    }

    /**
     * Sets character_name
     *
     * @param string $character_name EVE character name.
     *
     * @return $this
     */
    public function setCharacterName($character_name)
    {
        $this->container['character_name'] = $character_name;

        return $this;
    }

    /**
     * Gets removed_date
     *
     * @return \DateTime
     */
    public function getRemovedDate()
    {
        return $this->container['removed_date'];
    }

    /**
     * Sets removed_date
     *
     * @param \DateTime $removed_date Date of removal.
     *
     * @return $this
     */
    public function setRemovedDate($removed_date)
    {
        $this->container['removed_date'] = $removed_date;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action How it was removed (deleted or moved to another account).
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


